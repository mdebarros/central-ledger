# CircleCI v2 Config
version: 2

defaults: &defaults
  working_directory: /home/circleci/project
  docker:
    - image: dwolla/alpine-node-make
      environment:
        FLASK_CONFIG: testing

default_env: &default_env
  environment:
    # - TAG_EXP: 'v[0-9]+(\.[0-9]+)*'
    # - TAG_EXP_SNAPSHOT: 'v[0-9]+(\.[0-9]+)*(\-SNAPSHOT)'
    # - TAG: "v0.1"


defaultDependencies: &defaultDependencies | 
    apk --no-cache add git
    apk --no-cache add ca-certificates
    apk --no-cache add curl

jobs:
  setup:
    <<: *defaults
    steps:
      - run:
          name: Install dependencies
          command: *defaultDependencies
      - checkout
      - run:
          name: Install interledgerjs/five-bells-ledger-api-tests
          command: npm install github:interledgerjs/five-bells-ledger-api-tests
      - run:
          name: Link NPM sodium
          command: npm link sodium
      - run:
          name: Link NPM argon2
          command: npm link argon2
      - run:
          name: Update NPM install
          command: npm install
      # - run:
      #     name: Update NPM install
      #     command: npm link sodium && npm link argon2 && npm install --production
      - save_cache:
          key: dependency-cache-{{ checksum "package.json" }}
          paths:
            - node_modules
  
  test-unit:
    <<: *defaults
    steps:
      - run:
          name: Install dependencies
          command: *defaultDependencies
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run: 
          name: Create dir for test results
          command: mkdir -p ./test/results
      - run: 
          name: Execute unit tests
          command: npm -s run test:xunit > ./test/results/tape.xml
      - store_artifacts:
          path: ./test/results
          prefix: test
      - store_test_results:
          path: ./test/results
  
  test-coverage:
    <<: *defaults
    steps:
      - run:
          name: Install dependencies
          command: *defaultDependencies
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run: 
          name: Execute code coverage check
          command: npm -s run test:coverage-check
      - store_artifacts:
          path: coverage
          prefix: test
      - store_test_results:
          path: coverage
  
  test-integration:
    machine: true
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run: 
          name: Create dir for test results
          command: mkdir -p ./test/results
      - run: 
          name: Execute unit tests
          command: npm -s run test:integration
      - store_artifacts:
          path: ./test/results
          prefix: test
      - store_test_results:
          path: ./test/results
  
  test-functional:
    machine: true
    steps:
      - run: 
          name: Add the Postgres 9.6 binaries to the path.
          command: echo ‘/usr/lib/postgresql/9.6/bin/:$PATH’ >> $BASH_ENV
      - run:
          name: Install Docker Compose
          command: |
            curl -L https://github.com/docker/compose/releases/download/1.11.2/docker-compose-`uname -s`-`uname -m` > ~/docker-compose
            chmod +x ~/docker-compose
            mv ~/docker-compose /usr/local/bin/docker-compose
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run: 
          name: Create dir for test results
          command: mkdir -p ./test/results
      - run: 
          name: Execute unit tests
          command: npm -s run test:functional
      - store_artifacts:
          path: ./test/results
          prefix: test
      - store_test_results:
          path: ./test/results

#   test-spec:
#     machine: true
#     # <<: *defaults 
#     steps:
#     #   - run: 
#     #       name: Install dependencies 
#     #       command: *defaultDependencies 
#     #   - run:  
#     #       name: Add the Postgres 9.6 binaries to the path. 
#     #       command: apk --no-cache add postgresql-client 
#     #   - setup_remote_docker 
#     #   - run:  
#     #       name: Add docker 
#     #       command: apk --no-cache add docker 
#     #   - run:  
#     #       name: Add docker compose 
#     #       command: | 
#     #         apk --no-cache add py-pip 
#     #         pip install docker-compose 
#     #   - run: 
#     #       name: Install Docker Compose 
#     #       command: | 
#     #         curl -L https://github.com/docker/compose/releases/download/1.8.0/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose; chmod +x /usr/local/bin/docker-compose 
#       - run: 
#           name: Add the Postgres 9.6 binaries to the path.
#           command: echo ‘/usr/lib/postgresql/9.6/bin/:$PATH’ >> $BASH_ENV
#       - run:
#           name: Install Docker Compose
#           command: |
#             curl -L https://github.com/docker/compose/releases/download/1.11.2/docker-compose-`uname -s`-`uname -m` > ~/docker-compose
#             chmod +x ~/docker-compose
#             mv ~/docker-compose /usr/local/bin/docker-compose
#       - checkout
#       - restore_cache:
#           key: dependency-cache-{{ checksum "package.json" }}
#       - run: 
#           name: Create dir for test results
#           command: mkdir -p ./test/results
#       - run: 
#           name: Execute unit tests
#           command: npm -s run test:spec
#       - store_artifacts:
#           path: ./test/results
#           prefix: test
#       - store_test_results:
#           path: ./test/results

  build-snapshot:
    machine: true
    steps:
      - checkout
      - run: 
          name: Print Docker Image
          command: |
            if [[ "$TAG" =~ ^$TAG_EXP_SNAPSHOT$ ]]
            then
                echo "Building Docker Image: $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:$TAG"
            else
                echo "Not a release (missing tag), skipping Docker Build steps"
            fi

      - run: 
          name: Login to Docker Hub
          command: |
            if [[ "$TAG" =~ ^$TAG_EXP_SNAPSHOT$ ]]
            then
                docker login -u $DOCKER_USER -p $DOCKER_PASS
            else
                echo "Not a release (missing tag), skipping Docker Login"
            fi
      - run: 
          name: Build Docker image
          command: |
            if [[ "$TAG" =~ ^$TAG_EXP_SNAPSHOT$ ]]
            then
                docker build -t $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:$TAG -t $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:snapshot .
            else
                echo "Not a release (missing tag), skipping Docker Build"
            fi
      - run: 
          name: Publish Docker image $TAG & Latest tag to Docker Hub
          command: |
            if [[ "$TAG" =~ ^$TAG_EXP_SNAPSHOT$ ]]
            then
                docker push $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:$TAG
                docker push $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:$snapshot
            else
                echo "Not a release (missing tag), skipping Docker Push"
            fi

#  deploy-snapshot:
#     machine: true
#     <<: *default_env
#     steps:
#       - checkout
#       # login to docker hub
#       # TBD

  build:
    machine: true
    <<: *default_env
    steps:
      - checkout
      - run: 
          name: Print Docker Image
          command: |
            if [[ "$TAG" =~ ^$TAG_EXP$ ]]
            then
                echo "Building Docker Image: $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:$TAG"
            else
                echo "Not a release (missing tag), skipping Docker Build steps"
            fi

        #if [[ "$TAG" =~ ^v[0-9]+(\.[0-9]+)*$ ]]; then echo "Valid date"; else echo "Invalid date"; fi
      - run: 
          name: Login to Docker Hub
          command: |
            if [[ "$TAG" =~ ^$TAG_EXP$ ]]
            then
                docker login -u $DOCKER_USER -p $DOCKER_PASS
            else
                echo "Not a release (missing tag), skipping Docker Login"
            fi
      - run: 
          name: Build Docker image
          command: |
            if [[ "$TAG" =~ ^v[0-9]+(\.[0-9]+)*$ ]]
            then
                docker build -t $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:$TAG -t $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:latest .
            else
                echo "Not a release (missing tag), skipping Docker Build"
            fi
      - run: 
          name: Publish Docker image $TAG & Latest tag to Docker Hub
          command: |
            if [[ "$TAG" =~ ^$TAG_EXP$ ]]
            then
                docker push $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:$TAG
                docker push $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:$latest
            else
                echo "Not a release (missing tag), skipping Docker Push"
            fi
#   deploy:
#     machine: true
#     <<: *default_env
#     steps:
#       - checkout
#       # login to docker hub
#       # TBD

workflows:
  version: 2
  build_and_test:
    jobs:
    #   - setup:
    #       context: org-global
    #       filters:
    #           branches:
    #             ignore: 
    #               - /feature*/
    #               - /bugfix*/
    #   - test-unit:
    #       context: org-global
    #       requires:
    #         - setup
    #       filters:
    #         branches:
    #           ignore: 
    #             - /feature*/
    #             - /bugfix*/             
    #   - test-coverage:
    #       context: org-global
    #       requires:
    #         - setup
    #       filters:
    #         branches:
    #           ignore: 
    #             - /feature*/
    #             - /bugfix*/
    #   - test-integration:
    #       context: org-global
    #       requires:
    #         - setup
    #       filters:
    #         branches:
    #           ignore: 
    #             - /feature*/
    #             - /bugfix*/
    #   - test-functional:
    #       context: org-global
    #       requires:
    #         - setup
    #       filters:
    #         branches:
    #           ignore: 
    #             - /feature*/
    #             - /bugfix*/
    #   - test-spec:
    #       context: org-global
    #       requires:
    #         - setup
    #       filters:
    #         branches:
    #           ignore: 
    #             - /feature*/
    #             - /bugfix*/
      - build-snapshot:
          context: org-global
          requires:
            # - setup
            # - test-unit
            # - test-coverage
            # - test-integration
            # - test-functional
            # - test-spec
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*\-SNAPSHOT/
            branches:
              only:
                - develop-test
    #   - deploy-snapshot:
    #       context: org-global
    #       requires:
    #         # - setup
    #         # - test-unit
    #         # - test-coverage
    #         # - test-integration
    #         # - test-functional
    #         # - test-spec
    #         - build-snapshot
    #       filters:
    #         tags:
    #           only: /v[0-9]+(\.[0-9]+)*-SNAPSHOT/
    #         branches:
    #           only:
    #             - develop-test
      - build:
          context: org-global
          requires:
            # - setup
            # - test-unit
            # - test-coverage
            # - test-integration
            # - test-functional
            # - test-spec
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*/
            branches:
              only:
                - master-test
    #   - deploy:
    #       context: org-global
    #       requires:
    #         # - setup
    #         # - test-unit
    #         # - test-coverage
    #         # - test-integration
    #         # - test-functional
    #         # - test-spec
    #         - build
    #       filters:
    #         tags:
    #           only: /v[0-9]+(\.[0-9]+)*/
    #         branches:
    #           only:
    #             - master-test
